// Code generated by goctl. DO NOT EDIT.
package types

type BaseDataInfo struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
	Data string `json:"data,omitempty"`
}

type BaseIDInfo struct {
	Id        *uint64 `json:"id,optional"`
	CreatedAt *int64  `json:"createdAt,optional"`
	UpdatedAt *int64  `json:"updatedAt,optional"`
}

type BaseListInfo struct {
	Total uint64 `json:"total"`
	Data  string `json:"data,omitempty"`
}

type BaseMsgResp struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
}

type BaseUUIDInfo struct {
	Id        *string `json:"id,optional"`
	CreatedAt *int64  `json:"createdAt,optional"`
	UpdatedAt *int64  `json:"updatedAt,optional"`
}

type ChangePasswordReq struct {
	OldPassword string `json:"oldPassword" validate:"required,max=30"`
	NewPassword string `json:"newPassword" validate:"required,max=30"`
}

type IDPathReq struct {
	Id uint64 `path:"id"`
}

type IDReq struct {
	Id uint64 `json:"id" validate:"number"`
}

type IDsReq struct {
	Ids []uint64 `json:"ids"`
}

type LoginByEmailReq struct {
	Email   string `json:"email" validate:"required,email,max=100"`
	Captcha string `json:"captcha,optional" validate:"omitempty,len=5"`
}

type LoginBySmsReq struct {
	PhoneNumber string `json:"phoneNumber"  validate:"required,numeric,max=20"`
	Captcha     string `json:"captcha,optional" validate:"omitempty,len=5"`
}

type LoginInfo struct {
	UserId string `json:"userId"`
	Token  string `json:"token"`
	Expire uint64 `json:"expire"`
}

type LoginReq struct {
	Username  string `json:"username" validate:"required,alphanum,max=20"`
	Password  string `json:"password" validate:"required,max=30,min=6"`
	CaptchaId string `json:"captchaId"  validate:"required,len=20"`
	Captcha   string `json:"captcha" validate:"required,len=5"`
}

type LoginResp struct {
	BaseDataInfo
	Data LoginInfo `json:"data"`
}

type PageInfo struct {
	Page     uint64 `json:"page" validate:"required,number,gt=0"`
	PageSize uint64 `json:"pageSize" validate:"required,number,lt=100000"`
}

type PermCodeResp struct {
	BaseDataInfo
	Data []string `json:"data"`
}

type ProfileInfo struct {
	Nickname *string `json:"nickname" validate:"omitempty,alphanumunicode,max=10"`
	Avatar   *string `json:"avatar" validate:"omitempty,max=300"`
	Mobile   *string `json:"mobile" validate:"omitempty,numeric,max=18"`
	Email    *string `json:"email" validate:"omitempty,email,max=100"`
}

type ProfileResp struct {
	BaseDataInfo
	Data ProfileInfo `json:"data"`
}

type RefreshTokenInfo struct {
	Token     string `json:"token"`
	ExpiredAt int64  `json:"expiredAt"`
}

type RefreshTokenResp struct {
	BaseDataInfo
	Data RefreshTokenInfo `json:"data"`
}

type RegisterByEmailReq struct {
	Username string `json:"username" validate:"required,alphanum,max=20"`
	Password string `json:"password" validate:"required,max=30,min=6"`
	Captcha  string `json:"captcha" validate:"required,len=5"`
	Email    string `json:"email" validate:"required,email,max=100"`
}

type RegisterBySmsReq struct {
	Username    string `json:"username" validate:"required,alphanum,max=20"`
	Password    string `json:"password" validate:"required,max=30,min=6"`
	Captcha     string `json:"captcha" validate:"required,len=5"`
	PhoneNumber string `json:"phoneNumber"  validate:"required,numeric,max=20"`
}

type RegisterReq struct {
	Username  string `json:"username" validate:"required,alphanum,max=20"`
	Password  string `json:"password" validate:"required,max=30,min=6"`
	CaptchaId string `json:"captchaId" validate:"required,len=20"`
	Captcha   string `json:"captcha" validate:"required,len=5"`
	Email     string `json:"email" validate:"required,email,max=100"`
}

type ResetPasswordByEmailReq struct {
	Email    string `json:"email" validate:"email"`
	Captcha  string `json:"captcha"`
	Password string `json:"password"`
}

type ResetPasswordBySmsReq struct {
	PhoneNumber string `json:"phoneNumber"`
	Captcha     string `json:"captcha"`
	Password    string `json:"password"`
}

type RoleInfoSimple struct {
	RoleName string `json:"roleName"`
	Value    string `json:"value"`
}

type UUIDReq struct {
	Id string `json:"id" validate:"len=36"`
}

type UUIDsReq struct {
	Ids []string `json:"ids"`
}

type UserBaseIDInfo struct {
	Id             *string  `json:"id"`
	Username       *string  `json:"username"`
	Nickname       *string  `json:"nickname"`
	Avatar         *string  `json:"avatar"`
	HomePath       *string  `json:"homePath"`
	Description    *string  `json:"desc"`
	RoleName       []string `json:"roleName"`
	DepartmentName string   `json:"departmentName,optional"`
}

type UserBaseIDInfoResp struct {
	BaseDataInfo
	Data UserBaseIDInfo `json:"data"`
}

type UserInfo struct {
	BaseUUIDInfo
	Status       *uint32  `json:"status,optional" validate:"omitempty,lt=20"`
	Username     *string  `json:"username,optional" validate:"omitempty,max=50"`
	Nickname     *string  `json:"nickname,optional" validate:"omitempty,max=40"`
	Password     *string  `json:"password,optional" validate:"omitempty,min=6"`
	Description  *string  `json:"description,optional" validate:"omitempty,max=100"`
	HomePath     *string  `json:"homePath,optional" validate:"omitempty,max=70"`
	RoleIds      []string `json:"roleIds,optional"`
	Mobile       *string  `json:"mobile,optional" validate:"omitempty,max=18"`
	Email        *string  `json:"email,optional" validate:"omitempty,max=80"`
	Avatar       *string  `json:"avatar,optional" validate:"omitempty,max=300"`
	DepartmentId *string  `json:"departmentId,optional,omitempty"`
	PositionIds  []string `json:"positionId,optional,omitempty"`
}

type UserInfoResp struct {
	BaseDataInfo
	Data UserInfo `json:"data"`
}

type UserListInfo struct {
	BaseListInfo
	Data []UserInfo `json:"data"`
}

type UserListReq struct {
	PageInfo
	Username     *string  `form:"username,optional" validate:"omitempty,alphanum,max=20"`
	Nickname     *string  `form:"nickname,optional" validate:"omitempty,alphanumunicode,max=10"`
	Mobile       *string  `form:"mobile,optional" validate:"omitempty,numeric,max=18"`
	Email        *string  `form:"email,optional" validate:"omitempty,email,max=100"`
	RoleIds      []uint64 `form:"roleIds,optional"`
	DepartmentId *uint64  `form:"departmentId,optional"`
	PositionId   *uint64  `form:"positionId,optional"`
}

type UserListResp struct {
	BaseDataInfo
	Data UserListInfo `json:"data"`
}
